<?xml version="1.0" encoding="UTF-8" ?> 
<Module> 
<ModulePrefs title="Wayfinding Gadget" description="" author="Revel Digital" background="transparent">
  <UserPref name="access_id" display_name="AWS Access ID" datatype="string" default_value="" required="true" />
  <UserPref name="secret_key" display_name="AWS Secret Key" datatype="string" default_value="" required="true"/>
  <UserPref name="bot_name" display_name="Name of Lex Bot" datatype="string" default_value="ScheduleAppointment"/>
  <UserPref name="img_url" display_name="URL for button image" datatype="string" default_value="https://uploads.cdn.reveldigital.com/389153!talk%20icon4.png"/>
  <!-->
  <UserPref name="pulseColor" display_name="Pulse Color (hex value)" datatype="string" default_value="#02ffff"/>
  <UserPref name="pathWidth" display_name="Path Width (integer value)" datatype="string" default_value="3"/>
  <UserPref name="showButtons" display_name="Show Buttons?" datatype="bool" default_value="true"/> 
  -->
     
  <!-- The following preferences should not be modified -->
  <UserPref name="ForeColor" datatype="hidden" />
  <UserPref name="BackColor" datatype="hidden" />
  <UserPref name="rdW" display_name="Width" required="true" default_value="280" datatype="hidden" />
  <UserPref name="rdH" display_name="Height" required="true" default_value="190" datatype="hidden" />
  <UserPref name="rdKey" display_name="Device Registration Key" default_value="*|DEVICE.REGISTRATIONKEY|*" datatype="hidden" />
</ModulePrefs>
<Content type="html">
<![CDATA[

    <head>
    <meta charset="UTF-8">
    <title>AmazonLex</title>
    <meta name="author" content="lafranch">
    <meta name="description" content="Lex Runtime example from the browser.">
    <meta name="keywords" content="Amazon Lex, SDK, Runtime, Browser, JavaScript">
    <link rel="icon" type="image/png" href="https://raw.githubusercontent.com/kylep923/ChatBotGadget/master/img/favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="https://raw.githubusercontent.com/kylep923/ChatBotGadget/master/img/favicon-16x16.png" sizes="16x16" />

    <style>
        .white-circle {
            cursor: pointer;
            background-color: #fff;
            box-shadow: 0 0 8px #d8dbe3;
            border-radius: 100px;
            height: 100px;
            margin: 0 auto;
            width: 100px;
        }
        
        .white-circle:hover {
            box-shadow: 0 0 8px #007dbc;
        }
        
        .white-circle img {
            position: relative;
            top: 18px;
        }
        
        .audio-control {
            position: fixed;
            top: 50%;
            left: 50%;
            margin-top: -50px;
            margin-left: -50px;
            text-align: center;
        }
        
        body {
            font-family: "HelveticaNeue-Light", "Helvetica Neue Light", "Helvetica Neue", Helvetica, Arial, "Lucida Grande", sans-serif;
            line-height: 21px;
            color: #444;
            font-size: 13px;
            font-weight: 400;
            background-color: rgba(0, 0, 0, 0);
        }
        
        img {
            max-width: 100%;
            max-height: 85%;
        }
        
        canvas {
            height: 100px;
            width: 100vw;
            margin-top: -50px;
            display: block;
            position: fixed;
            top: 50%;
            left: 0;
            z-index: -1;
            background-color: rgba(0, 0, 0, 0);
        }
    </style>
</head>

<body class="wrapper">
    <div class="audio-control">
        <p id="audio-control" class="white-circle">
            <img src="__UP_img_url__">
            <canvas class="visualizer"></canvas>
        </p>
        <p><span id="message"></span></p>
    </div>
    <script src="https://sdk.amazonaws.com/js/aws-sdk-2.48.0.min.js"></script>
    <script src="https://cdn.rawgit.com/kylep923/ChatBotGadget/master/dist/aws-lex-audio.min.js" type="text/javascript"></script>
    <!-- <script src="https://cdn.rawgit.com/kylep923/ChatBotGadget/master/dist/aws-lex-audio.js" type="text/javascript"></script> -->

    <script type="text/javascript">
        (function() {
            'use strict';
            var canvas = document.querySelector('.visualizer');
            var canvasCtx = canvas.getContext('2d');
            var listening = true;

            /**
             * Will render an audio buffer as wave form. Right now, it expects 
             * a canvas element to be on the page with class name "visualizer".
             */
            window.Waveform = function() {
                /**
                 * Clears the canvas element.
                 */
                var clearCanvas = function() {
                    canvasCtx.clearRect(0, 0, canvas.width, canvas.height);
                    listening = false;
                };

                /**
                 * Sets the listening flag to true.
                 */
                var prepCanvas = function() {
                    listening = true;
                };

                /**
                 * Clears the canvas and draws the dataArray. 
                 * @param {Uint8Array} dataArray - The time domain audio data to visualize.
                 * @param {number} bufferLength - The FFT length.
                 */
                var visualizeAudioBuffer = function(dataArray, bufferLength) {
                    var WIDTH = canvas.width;
                    var HEIGHT = canvas.height;
                    var animationId;
                    canvasCtx.clearRect(0, 0, WIDTH, HEIGHT);

                    /**
                     * Will be called at about 60 times per second. If listening, draw the dataArray. 
                     */
                    function draw() {
                        if (!listening) {
                            return;
                        }

                        canvasCtx.fillStyle = 'rgba(0, 0, 0, 0)';
                        canvasCtx.fillRect(0, 0, WIDTH, HEIGHT);
                        canvasCtx.lineWidth = 1;
                        canvasCtx.strokeStyle = 'rgb(0,125,188)';
                        canvasCtx.beginPath();

                        var sliceWidth = WIDTH * 1.0 / bufferLength;
                        var x = 0;

                        for (var i = 0; i < bufferLength; i++) {
                            var v = dataArray[i] / 128.0;
                            var y = v * HEIGHT / 2;
                            if (i === 0) {
                                canvasCtx.moveTo(x, y);
                            } else {
                                canvasCtx.lineTo(x, y);
                            }
                            x += sliceWidth;
                        }

                        canvasCtx.lineTo(canvas.width, canvas.height / 2);
                        canvasCtx.stroke();
                    }

                    // Register our draw function with requestAnimationFrame. 
                    if (typeof animationId === 'undefined') {
                        animationId = requestAnimationFrame(draw);
                    }
                };
                return {
                    clearCanvas: clearCanvas,
                    prepCanvas: prepCanvas,
                    visualizeAudioBuffer: visualizeAudioBuffer
                };
            };
        })();
    </script>

    <script type="text/javascript">
        var prefs = new gadgets.Prefs();
        var AccessID = prefs.getString("access_id");
        var SecretKey = prefs.getString("secret_key");
        var BotName = prefs.getString("bot_name");

        AWS.config.region = 'us-east-1';
        AWS.config.credentials = new AWS.CognitoIdentityCredentials({
            // Provide your Pool Id here
            IdentityPoolId: 'us-east-1:64b7df76-83e1-47b2-8c44-86d49e88978c',
        });

        var lexruntime = new AWS.LexRuntime();
        var lexUserId = 'chatbot-demo' + Date.now();
        var sessionAttributes = {};

        function pushChat(text) {
            params = globalLexConfig;
            console.log(text);
            //console.log(params);
            // if there is text to be sent...
            var wisdomText = text
            if (wisdomText) {

                /* send it to the Lex runtime
                var params = {
                    botAlias: '$LATEST',
                    botName: 'ScheduleAppointment',
                    inputText: wisdomText,
                    userId: 'userId',
                    //sessionAttributes: sessionAttributes
                };
                */
                params.contentType = "text/plain; charset=utf-8"
                params.inputStream = text;

                console.log(JSON.stringify(params));

                lexruntime.postContent(params, function(err, data) {
                    if (err) {
                        console.log('Error:  ' + err.message);
                        console.log(err, err.stack);
                        //showError('Error:  ' + err.message + ' (see console for details)')
                    }
                    if (data) {
                        // capture the sessionAttributes for the next cycle
                        //sessionAttributes = data.sessionAttributes;
                        // show response and/or error/dialog status
                        console.log(data);
                        startConvo();
                        //state.audioOutput = data;
                        //return state;
                        //state.transition(new Speaking(state));
                        //state.onSuccess(data);
                        //showResponse(data);
                    }
                    //re-enable input

                });
            }
            // we always cancel form submission
            return false;
        }

        var waveform = window.Waveform();
        var message = document.getElementById('message');
        var config, conversation;
        message.textContent = 'Passive';
        var flag = false;
        var flag2 = false;
        var globalLexConfig;
        document.getElementById('audio-control').onclick = function() {

            // prefs here
            AWS.config.credentials = new AWS.Credentials(AccessID, SecretKey, null);
            AWS.config.region = 'us-east-1';

            config = {
                lexConfig: {
                    // pref here
                    //sessionAttributes: sessionAttributes,
                    botName: "ScheduleAppointment"
                }
            };

            conversation = new LexAudio.conversation(config, function(state) {
                message.textContent = state + '...';
                console.log(state);
                console.log(config['lexConfig'].inputStream);
                globalLexConfig = config['lexConfig'];
                if (state === 'Listening') {
                    waveform.prepCanvas();
                    if (flag) {
                        //pushChat(config['lexConfig'], 'root canal');
                        config['lexConfig'].contentType = "text/plain; charset=utf-8";
                        config['lexConfig'].inputStream = null;
                        console.log(conversation);
                        flag = false;
                        flag2 = true;
                        waveform.clearCanvas();
                        //config['lexConfig'].inputStream = 'root canal';
                    }
                }
                if (state === 'Sending') {
                    waveform.clearCanvas();
                }
            }, function(data) {
                console.log('Transcript: ', JSON.stringify(data.inputTranscript), ", Response: ", JSON.stringify(data.message));
                console.log(JSON.stringify(data.slots.LocationTypevalue));
                if (typeof Client != 'undefined' && data.dialogState == "Fulfilled") {
                    console.log('client found');
                    Client.callback(data.slots.LocationTypevalue);
                } else {
                    console.log('client not found');
                }
            }, function(error) {
                message.textContent = error;
                console.log(error);
            }, function(timeDomain, bufferLength) {
                waveform.visualizeAudioBuffer(timeDomain, bufferLength);
            });
            conversation.advanceConversation();
        };

        function startConvo() {
            // prefs here
            AWS.config.credentials = new AWS.Credentials(AccessID, SecretKey, null);
            AWS.config.region = 'us-east-1';

            config = {
                lexConfig: {
                    // pref here
                    //sessionAttributes: sessionAttributes,
                    botName: "ScheduleAppointment"
                }
            };

            conversation = new LexAudio.conversation(config, function(state) {
                message.textContent = state + '...';
                console.log(state);
                console.log(config['lexConfig'].inputStream);
                globalLexConfig = config['lexConfig'];
                if (state === 'Listening') {
                    waveform.prepCanvas();
                    if (flag) {
                        //pushChat(config['lexConfig'], 'root canal');
                        config['lexConfig'].contentType = "text/plain; charset=utf-8";
                        config['lexConfig'].inputStream = null;
                        console.log(conversation);
                        flag = false;
                        flag2 = true;
                        waveform.clearCanvas();
                        //config['lexConfig'].inputStream = 'root canal';
                    }
                }
                if (state === 'Sending') {
                    waveform.clearCanvas();
                }
            }, function(data) {
                console.log('Transcript: ', JSON.stringify(data.inputTranscript), ", Response: ", JSON.stringify(data.message));
                console.log(JSON.stringify(data.slots.LocationTypevalue));
                if (typeof Client != 'undefined' && data.dialogState == "Fulfilled") {
                    console.log('client found');
                    Client.callback(data.slots.LocationTypevalue);
                } else {
                    console.log('client not found');
                }
            }, function(error) {
                message.textContent = error;
                console.log(error);
            }, function(timeDomain, bufferLength) {
                waveform.visualizeAudioBuffer(timeDomain, bufferLength);
            });
            conversation.advanceConversation();
        }
    </script>
</body>

]]>
</Content>
</Module>